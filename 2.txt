////////////////////////////////////////////////////////////////////////////////
// ОбщийМодуль: РегламентныеПроцедуры
// Этот модуль реализует загрузку данных из файлов, разбор данных, создание
// записей в справочнике, формирование очереди почтовых отправлений и отправку писем.
////////////////////////////////////////////////////////////////////////////////

//////////////////////////////
// 0. Вспомогательные функции для работы с именами файлов
//////////////////////////////
Функция ИзвлечьEmail(ИсходнаяСтрока) Экспорт
    Emails = Новый Массив;
    
    // 1. Удаляем пробелы в начале и конце
    Строка = СокрЛП(ИсходнаяСтрока);
    
    // 2. Разбиваем строку на слова по пробелам
    Слова = СтрРазделить(Строка, " ");
    
    // 3. Собираем все слова с символом "@"
    Для Каждого Слово Из Слова Цикл
        ОчищенноеСлово = СокрЛП(Слово);
        Если СтрНайти(ОчищенноеСлово, "@") > 0 Тогда
            Emails.Добавить(ОчищенноеСлово);
        КонецЕсли;
    КонецЦикла;
    
    // 4. Возвращаем массив найденных email (даже если он пустой)
    Возврат Emails;
КонецФункции
// Функция ПолучитьИмяБезРасширения
// Возвращает имя файла без расширения, используя объект "Файл"
Функция ПолучитьИмяБезРасширения(ПолноеИмяФайла) Экспорт
    Попытка
        ФайлОбъект = Новый Файл(ПолноеИмяФайла);
        Возврат ФайлОбъект.ИмяБезРасширения();
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

// Функция КаталогФайла
// Возвращает путь (каталог) файла, используя объект "Файл"
Функция КаталогФайла(ПолноеИмяФайла) Экспорт
    Попытка
        ФайлОбъект = Новый Файл(ПолноеИмяФайла);
        Возврат ФайлОбъект.Путь;
    Исключение
        Возврат "";
    КонецПопытки;
КонецФункции

//////////////////////////////
// 1. Функции для загрузки данных из файлов
//////////////////////////////

Функция ЗагрузитьДанныеИзФайлов(ПутьКПапке) Экспорт
    РезультатЗагрузки = Новый Структура;
    РезультатЗагрузки.Вставить("КоличествоЗаписей", 0);
    РезультатЗагрузки.Вставить("КоличествоФайлов", 0);
    РезультатЗагрузки.Вставить("Успешно", Истина);
    РезультатЗагрузки.Вставить("Сообщение", "");
    
    Если Не ЗначениеЗаполнено(ПутьКПапке) Тогда
        РезультатЗагрузки.Успешно = Ложь;
        РезультатЗагрузки.Сообщение = "Не указан путь к папке с файлами";
        Возврат РезультатЗагрузки;
    КонецЕсли;
    
    ПроверкаПути = Новый Файл(ПутьКПапке);
    Если Не ПроверкаПути.Существует() Или Не ПроверкаПути.ЭтоКаталог() Тогда
        РезультатЗагрузки.Успешно = Ложь;
        РезультатЗагрузки.Сообщение = "Указанный путь не существует или не является каталогом: " + ПутьКПапке;
        Возврат РезультатЗагрузки;
    КонецЕсли;
    
    Файлы = НайтиФайлы(ПутьКПапке, "*.txt");
    Если Файлы.Количество() = 0 Тогда
        РезультатЗагрузки.Сообщение = "В указанной папке не найдены текстовые файлы (*.txt)";
        Возврат РезультатЗагрузки;
    КонецЕсли;
    
    Для Каждого Файл Из Файлы Цикл
        КоличествоВФайле = ЗагрузитьЗаписиИзТекстовогоФайла(Файл.ПолноеИмя);
        РезультатЗагрузки.КоличествоЗаписей = РезультатЗагрузки.КоличествоЗаписей + КоличествоВФайле;
        РезультатЗагрузки.КоличествоФайлов = РезультатЗагрузки.КоличествоФайлов + 1;
    КонецЦикла;
    
    РезультатЗагрузки.Сообщение = "Загружено " + РезультатЗагрузки.КоличествоЗаписей 
                                 + " записей из " + РезультатЗагрузки.КоличествоФайлов + " файлов";
    Возврат РезультатЗагрузки;
КонецФункции

Функция ПрочитатьТекстовыйФайл(ПолныйПутьКФайлу)
    Текст = "";
    Попытка
        ТекстовыйДокумент = Новый ТекстовыйДокумент;
        ТекстовыйДокумент.Прочитать(ПолныйПутьКФайлу, КодировкаТекста.UTF8);
        Текст = ТекстовыйДокумент.ПолучитьТекст();
    Исключение
        Сообщить("Ошибка чтения файла: " + ПолныйПутьКФайлу + Символы.ПС + ОписаниеОшибки());
    КонецПопытки;
    Возврат Текст;
КонецФункции

Функция ЗагрузитьЗаписиИзТекстовогоФайла(ПутьКФайлу)
    ТекстФайла = ПрочитатьТекстовыйФайл(ПутьКФайлу);
    Если Не ЗначениеЗаполнено(ТекстФайла) Тогда
        Возврат 0;
    КонецЕсли;
    
    МассивЗаписей = СтрРазделить(ТекстФайла, "###", Ложь);
    КоличествоСозданных = 0;
    
    Для Каждого ТекстЗаписи Из МассивЗаписей Цикл
        Если Не ЗначениеЗаполнено(СокрЛП(ТекстЗаписи)) Тогда
            Продолжить;
        КонецЕсли;
        СтруктураДанных = РазобратьЗапись(ТекстЗаписи);
        Если СоздатьЗаписьВСправочнике(СтруктураДанных, ПутьКФайлу) Тогда
            КоличествоСозданных = КоличествоСозданных + 1;
        КонецЕсли;
    КонецЦикла;
    
    Если МассивЗаписей.Количество() <= 1 И КоличествоСозданных = 0 Тогда
        СтруктураДанных = РазобратьЗапись(ТекстФайла);
        Если ЗначениеЗаполнено(СтруктураДанных.Наименование) 
           И СоздатьЗаписьВСправочнике(СтруктураДанных, ПутьКФайлу) Тогда
            КоличествоСозданных = 1;
        КонецЕсли;
    КонецЕсли;
    
    Возврат КоличествоСозданных;
КонецФункции

//////////////////////////////
// 2. Разбор строки TXT и извлечение данных
//////////////////////////////

Функция РазобратьЗапись(ТекстЗаписи)
    Результат = Новый Структура;
    Результат.Вставить("Наименование", "");
    Результат.Вставить("Кличка", "");
    Результат.Вставить("Хозяин", "");
    Результат.Вставить("Порода", "");
    Результат.Вставить("EmailsКлуба", Новый Массив); // Изменили на массив!
    Результат.Вставить("ПризовоеМесто", "");
    
    Строки = СтрРазделить(ТекстЗаписи, Символы.ПС, Ложь);
    
    Для Каждого Строка Из Строки Цикл
        СтрокаТекст = СокрЛП(Строка);
        Если ПустаяСтрока(СтрокаТекст) Тогда
            Продолжить;
        КонецЕсли;
        
        // Обработка email (теперь добавляем ВСЕ найденные)
        Если СтрНайти(СтрокаТекст, "@") > 0 Тогда
            МассивEmail = ИзвлечьEmail(СтрокаТекст);
            Для Каждого Email Из МассивEmail Цикл
                Результат.EmailsКлуба.Добавить(Email);
            КонецЦикла;
            Продолжить;
        КонецЕсли;
        
        // Остальная логика без изменений
        Если СтрНайти(СтрокаТекст, "Призовое место:") > 0 Тогда
            Призовое = Сред(СтрокаТекст, СтрДлина("Призовое место:") + 1);
            Результат.ПризовоеМесто = СокрЛП(Призовое);
            Продолжить;
        КонецЕсли;
        
        ПозицияРазделителя = СтрНайти(СтрокаТекст, ":");
        Если ПозицияРазделителя > 0 Тогда
            ИмяПоля = СокрЛП(Лев(СтрокаТекст, ПозицияРазделителя - 1));
            ЗначениеПоля = СокрЛП(Сред(СтрокаТекст, ПозицияРазделителя + 1));
            Если НРег(ИмяПоля) = "наименование" Тогда
                Результат.Наименование = ЗначениеПоля;
                Если Не ЗначениеЗаполнено(Результат.Кличка) Тогда
                    Результат.Кличка = ЗначениеПоля;
                КонецЕсли;
            ИначеЕсли НРег(ИмяПоля) = "кличка" Или НРег(ИмяПоля) = "кличка животного" Тогда
                Результат.Кличка = ЗначениеПоля;
                Если Не ЗначениеЗаполнено(Результат.Наименование) Тогда
                    Результат.Наименование = ЗначениеПоля;
                КонецЕсли;
            ИначеЕсли НРег(ИмяПоля) = "хозяин" Тогда
                Результат.Хозяин = ЗначениеПоля;
            ИначеЕсли НРег(ИмяПоля) = "порода" Тогда
                Результат.Порода = ЗначениеПоля;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Возврат Результат;
КонецФункции
//////////////////////////////
// 3. Создание/обновление записи в справочнике и заполнение ТЧ "Конкурсы"
Функция СоздатьЗаписьВСправочнике(Данные, ПолноеИмяTXT) Экспорт
    Если Не ЗначениеЗаполнено(Данные.Наименование) Тогда
        Возврат Ложь;
    КонецЕсли;
    
    НазваниеКонкурса = "";
    МассивЧастейИмени = СтрРазделить(ПолучитьИмяБезРасширения(ПолноеИмяTXT), "-");
    Если МассивЧастейИмени.Количество() >= 4 Тогда
        Для н = 4 По МассивЧастейИмени.Количество() Цикл
            НазваниеКонкурса = НазваниеКонкурса + СокрЛП(МассивЧастейИмени[н]) + " ";
        КонецЦикла;
        НазваниеКонкурса = СокрЛП(НазваниеКонкурса);
    КонецЕсли;
    
    СтруктураФайлов = НайтиФотоИДок(ПолноеИмяTXT);
    
    Попытка
        ЖивотноеОбъект = Справочники.ПородистыеЖивотные.СоздатьЭлемент();
        ЖивотноеОбъект.Наименование = Данные.Наименование;
        
        ПопыткаУстановитьРеквизит(ЖивотноеОбъект, "Хозяин", Данные.Хозяин);
        ПопыткаУстановитьРеквизит(ЖивотноеОбъект, "Порода", Данные.Порода);
        ПопыткаУстановитьРеквизит(ЖивотноеОбъект, "КличкаЖивотного", Данные.Кличка);
        
        // Добавляем в табличную часть КАЖДЫЙ email отдельно
        Если Не ПустаяСтрока(НазваниеКонкурса) Тогда
            Для Каждого Email Из Данные.EmailsКлуба Цикл
                ДобавитьСтрокуВТЧКонкурсы(
                    ЖивотноеОбъект, 
                    НазваниеКонкурса, 
                    Данные.ПризовоеМесто, 
                    ПолноеИмяTXT, 
                    Email // Передаем один email, а не весь массив
                );
            КонецЦикла;
        КонецЕсли;
        
        ЖивотноеОбъект.Записать();
        
        // Отправка на КАЖДЫЙ email из массива
        Если Данные.EmailsКлуба.Количество() > 0 Тогда
            ТекстПисьма = "Здравствуйте. " + Данные.Хозяин + " " + Данные.Порода + " " + Данные.Кличка;
            
            Вложения = "";
            ОписаниеВложений = "";
            Если ЗначениеЗаполнено(СтруктураФайлов.Фото) Тогда
                Вложения = СтруктураФайлов.Фото;
                ОписаниеВложений = "Фото животного";
            КонецЕсли;
            Если ЗначениеЗаполнено(СтруктураФайлов.Док) Тогда
                Если Не ПустаяСтрока(Вложения) Тогда
                    Вложения = Вложения + ";";
                    ОписаниеВложений = ОписаниеВложений + "; ";
                КонецЕсли;
                Вложения = Вложения + СтруктураФайлов.Док;
                ОписаниеВложений = ОписаниеВложений + "Документ грамоты";
            КонецЕсли;
            
            Для Каждого Email Из Данные.EmailsКлуба Цикл
                ДобавитьВОчередьПочтовыхОтправлений(
                    Email,
                    ТекстПисьма,
                    Вложения,
                    ОписаниеВложений
                );
            КонецЦикла;
        КонецЕсли;
        
        Возврат Истина;
    Исключение
        Сообщить("Ошибка при работе с записью '" + Данные.Наименование + "': " + ОписаниеОшибки());
        Возврат Ложь;
    КонецПопытки;
КонецФункции

//////////////////////////////
//////////////////////////////
// 4. Вспомогательные процедуры для ТЧ и поиска файлов
//////////////////////////////

Процедура ДобавитьСтрокуВТЧКонкурсы(ОбъектЖивотного, НазваниеКонкурса, ПризовоеМесто, ПутьКФайлу, EmailКлуба)
    НоваяСтрока = ОбъектЖивотного.Конкурсы.Добавить();
    НоваяСтрока.НазваниеКонкурса = НазваниеКонкурса;
    НоваяСтрока.ПризовоеМесто = ПризовоеМесто;
    НоваяСтрока.ДокументГрамоты = ПутьКФайлу;
    НоваяСтрока.EmailКлуба = EmailКлуба; // Теперь передается один email, а не массив
КонецПроцедуры

Функция НайтиФотоИДок(ПолноеИмяTXT) Экспорт
    Результат = Новый Структура;
    Результат.Вставить("Фото", Неопределено);
    Результат.Вставить("Док", ПолноеИмяTXT); // По умолчанию берем сам TXT как документ
    
    ИмяБезРасширения = ПолучитьИмяБезРасширения(ПолноеИмяTXT);
    Папка = КаталогФайла(ПолноеИмяTXT);
    ПредполагаемоеФото = Папка + "\" + ИмяБезРасширения + ".jpg";
    
    ФайлФото = Новый Файл(ПредполагаемоеФото);
    Если ФайлФото.Существует() Тогда
        Результат.Фото = ПредполагаемоеФото;
    КонецЕсли;
    
    Возврат Результат;
КонецФункции

//////////////////////////////
// 5. Утилиты для установки реквизитов
//////////////////////////////

Процедура УстановитьЗначениеРеквизита(ОбъектСправочника, ИмяРеквизита, Значение)
    Если Не ЗначениеЗаполнено(Значение) Тогда
        Возврат;
    КонецЕсли;
    Попытка
        ОбъектСправочника[ИмяРеквизита] = Значение;
    Исключение
        Попытка
            Если ОбъектСправочника.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
                ОбъектСправочника[ИмяРеквизита] = Значение;
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецПопытки;
КонецПроцедуры

Процедура ПопыткаУстановитьРеквизит(Объект, ИмяРеквизита, Значение)
    Если Не ЗначениеЗаполнено(Значение) Тогда
        Возврат;
    КонецЕсли;
    Попытка
        Объект[ИмяРеквизита] = Значение;
    Исключение
    КонецПопытки;
КонецПроцедуры

//////////////////////////////
// 6. Добавление записи в регистр "ОчередьПочтовыхОтправлений"

Процедура ДобавитьВОчередьПочтовыхОтправлений(Получатель, ТекстПисьма, Вложения, ОписаниеВложений) Экспорт
    Если ПустаяСтрока(Получатель) Тогда
        Возврат;
    КонецЕсли;

    // Создаем элемент справочника
    НовоеПисьмо = Справочники.ОчередьПисем.СоздатьЭлемент();
    
    // Наименование - используем Email получателя
    НовоеПисьмо.Наименование = СокрЛП(Получатель);
    
    // Заполняем реквизиты
    НовоеПисьмо.Получатель = Получатель;
    НовоеПисьмо.ДатаСоздания = ТекущаяДата();
    НовоеПисьмо.СодержаниеПисьма = ТекстПисьма;
    НовоеПисьмо.Вложения = Вложения;
    НовоеПисьмо.ОписаниеВложений = ОписаниеВложений;
    НовоеПисьмо.Отправлено = Ложь;
    
    // Записываем элемент
    Попытка
        НовоеПисьмо.Записать();
        Сообщить("Создана запись в очереди для: " + Получатель + " с кодом: " + НовоеПисьмо.Код);
    Исключение
        Сообщить("Ошибка при создании записи: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры
//////////////////////////////
// 7. Регламентная процедура: Отправить письма из очереди (каждые 5 минут)
//////////////////////////////
Процедура ОтправитьПисьмаИзОчереди() Экспорт
    // Получаем неотправленные письма
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ОчередьПисем.Ссылка,
    |   ОчередьПисем.Код,
    |   ОчередьПисем.Получатель,
    |   ОчередьПисем.СодержаниеПисьма,
    |   ОчередьПисем.Вложения,
    |   ОчередьПисем.ОписаниеВложений
    |ИЗ
    |   Справочник.ОчередьПисем КАК ОчередьПисем
    |ГДЕ
    |   ОчередьПисем.Отправлено = ЛОЖЬ";
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Успешно = ОтправитьПисьмо(
            Выборка.Получатель, 
            Выборка.СодержаниеПисьма, 
            Выборка.Вложения, 
            Выборка.ОписаниеВложений
        );
        
        Если Успешно Тогда
            // Отмечаем как отправленное
            ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
            Если ПисьмоОбъект <> Неопределено Тогда
                ПисьмоОбъект.Отправлено = Истина;
                ПисьмоОбъект.Записать();
                Сообщить("Письмо с кодом " + Выборка.Код + " отмечено как отправленное");
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры
//////////////////////////////
// 8. Функция отправки письма (заглушка)
//////////////////////////////

Функция ОтправитьПисьмо(Адресат, ТекстПисьма, СтрокаВложений, СтрокаОписание) Экспорт
    Сообщить("Отправка письма на адрес: " + Адресат);
    Сообщить("Текст: " + ТекстПисьма);
    Если Не ПустаяСтрока(СтрокаВложений) Тогда
        Сообщить("Вложения: " + СтрокаВложений);
    КонецЕсли;
    Возврат Истина;
КонецФункции

//////////////////////////////
// 9. Регламентная процедура: Загрузить новые файлы (каждые 1 минуту)
//////////////////////////////

Процедура ЗагрузитьНовыеФайлыИзПапки() Экспорт
    ПутьКПапке = Константы.ПутьКФайламЖивотных.Получить();
    Если Не ЗначениеЗаполнено(ПутьКПапке) Тогда
        Возврат;
    КонецЕсли;
    
    Результат = ЗагрузитьДанныеИзФайлов(ПутьКПапке);
    // При желании можно логировать результат, например:
    // Сообщить("Результат загрузки: " + Результат.Сообщение);
КонецПроцедуры

нужно сделать чтобы в справочник ПородистыеЖивотные есть Табличные части Конкурсы и в них НазваниеКонкурса, ПризовоеМесто, ДокументГрамоты, EmailКлуба

чтобы из файла туда тоже добавлялось к записи